name: llama-cpp-python

on: workflow_dispatch

jobs:
  build_wheels_linux:
    name: Build wheels on ubuntu-latest
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    defaults:
      run:
        shell: bash -el {0}

    steps:
      - name: Get latest tag
        id: get-latest-tag
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const response = await github.rest.repos.listTags({
              owner: 'abetlen',
              repo: 'llama-cpp-python'
            });
            const latestTag = response.data[0].name;
            console.log(`Latest tag is ${latestTag}`);
            return latestTag

      - uses: actions/checkout@v4
        with:
          repository: abetlen/llama-cpp-python
          submodules: true
          ref: ${{ steps.get-latest-tag.outputs.result }}

      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          miniforge-version: latest
          channels: conda-forge

      - name: echo conda-prefix
        run: |
          echo "LD_LIBRARY_PATH=$CONDA_PREFIX/lib" >> "$GITHUB_ENV"
          echo $CONDA_PREFIX/bin >> "$GITHUB_PATH"

      - run: conda install -y -c "nvidia/label/cuda-12.1.1" cuda
      - run: conda install -y build auditwheel

      - name: build wheel
        run: python -m build --wheel .
        env:
          CMAKE_ARGS: "-DLLAMA_CUBLAS=on"
          FORCE_CMAKE: "1"

      - run: auditwheel show dist/*

      - run: auditwheel repair --plat manylinux_2_28_x86_64 --exclude libllama.so --exclude libllava.so --exclude libggml_shared.so dist/*

      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: llama-cpp-python-${{ matrix.python-version }}-${{ steps.get-latest-tag.outputs.result }}

  test_wheel:
    name: Test wheels
    needs: [build_wheels_linux]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/setup-python@v4
        id: python
        with:
          python-version: "3.12"

      - uses: actions/download-artifact@v4
        with:
          pattern: llama-cpp-python-${{ steps.python.outputs.python-version }}-*
          path: dist

      - run: pip install -f dist llama-cpp-python

      - run: python -c "import llama_cpp"
