name: llama-cpp-python-kompute

on: workflow_dispatch

jobs:
  build_wheels_linux:
    name: Build wheels on ubuntu
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    defaults:
      run:
        shell: bash -el {0}

    steps:
      - name: Get latest tag
        id: get-latest-tag
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const response = await github.rest.repos.listTags({
              owner: 'abetlen',
              repo: 'llama-cpp-python'
            });
            const latestTag = response.data[0].name;
            console.log(`Latest tag is ${latestTag}`);
            return latestTag

      - uses: actions/checkout@v4
        with:
          repository: abetlen/llama-cpp-python
          submodules: recursive
          ref: ${{ steps.get-latest-tag.outputs.result }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Vulkan SDK
        run: |
          wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-focal.list http://packages.lunarg.com/vulkan/lunarg-vulkan-focal.list
          sudo apt update
          sudo apt install -y vulkan-sdk

      - run: ldd --version

      - run: pip install -U pip build auditwheel patchelf

      - name: build wheel
        run: python -m build --wheel .
        env:
          CMAKE_ARGS: "-DLLAMA_KOMPUTE=on -DKOMPUTE_OPT_DISABLE_VULKAN_VERSION_CHECK=ON -DBUILD_SHARED_LIBS=ON"
          FORCE_CMAKE: "1"

      - run: auditwheel show dist/*

      - run: auditwheel repair --plat manylinux_2_31_x86_64 --exclude libllama.so dist/*

      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: llama-cpp-python-${{ matrix.python-version }}-${{ steps.get-latest-tag.outputs.result }}

  test_wheel:
    name: Test wheels
    needs: [build_wheels_linux]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/download-artifact@v4
        with:
          pattern: llama-cpp-python-${{ matrix.python-version }}-*
          path: dist
          merge-multiple: true

      - run: ls -R dist
      - run: pip install -f dist llama-cpp-python

      - run: python -c "import llama_cpp"
